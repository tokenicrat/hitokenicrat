import os
import shutil
import sys
import re

# Fancy colorful output
RED = "\033[0;31m"
GREEN = "\033[0;32m"
BLUE = "\033[0;34m"
YELLOW = "\033[1;33m"
RESET = "\033[0m"

# Logger with these colors
def log(content, level = 3):
    match level:
        case 1:
            print(f"{RED}ERROR{RESET}   {content}")
        case 2:
            print(f"{YELLOW}WARNING{RESET} {content}")
        case 3:
            print(f"{BLUE}INFO{RESET}    {content}")
        case 4:
            print(f"{GREEN}SUCCESS{RESET} {content}")

# Clean rubbish
def clean(site = False, tmp = True, ignore_error = False):
    log("Clean old site and temporary files")
    try:
        if site:
            shutil.rmtree("site", ignore_error)
        if tmp:
            shutil.rmtree("tmp", ignore_error)
    except Exception as e:
        log(e, 1)
        log("Error cleaning old files", 1)

# Handle unexpected exit
def unexpected_exit(code, clean_tmp = True):
    if clean_tmp:
        clean(False, True, True)
        log("Remove files created in this session and exit", 2)
        log("You may have to remove site yourself", 2)
    else:
        log("Exit", 2)
    exit(code)

# Read configuration defined in conf.py
try:
    import conf
except ImportError as e:
    log("Failed to read conf.py, does it exist?", 1)
    unexpected_exit(1)

# Read templates defined in template.py
try:
    import template
except ImportError as e:
    log("Failed to read template.py, does it exist?", 1)
    unexpected_exit(1)

# Validate required configuration
REQUIRED_VAR = ["SITE_NAME"]

for var in REQUIRED_VAR:
    if not var in conf.config:
        log("Some important variables are not set", 1)
        log("See docs for help")
        unexpected_exit(1)

# Clean everything before generating
clean(True, True, True)
log("Remove old content")
if os.path.isdir("site") or os.path.isdir("tmp"):
    log("Failed to delete old site, do you have the right permissions?", 2)
    log("Continue? [y/n]")
    a = "n"
    if not "-y" in sys.argv:
        a = input()
    if a in ["y", "Y", "yes", "Yes"] or "-y" in sys.argv:
        log("Continue w/o deleting old files", 2)
        pass
    else:
        log("Old site not deleted", 1)
        unexpected_exit(1)

# Create proper directory structure
try:
    os.mkdir("site")
except Exception as e:
    log(e, 1)
    log("Failed to create site structure", 1)
    unexpected_exit(1)

# Copy static files as is
try:
    shutil.copytree("static", "site/static")
except Exception as e:
    log(e, 1)
    log("Failed to copy static assets, do you have rw permissions?", 1)
    unexpected_exit(1)
log("Copy static files")

# Convert plain-text files into HTML format
# It's just simple find-replace mechanism. Don't expect anything fancy

def convert_text(type, in_txt, out_html):
    log(f"Start converting {in_txt} to {out_html}")
    try:
        with open(in_txt, 'r') as f:
           fl = f.readlines() 
        (ARTICLE_NAME, CREATION_TIME) = (fl[0][:-1], fl[1][:-1])
        CONTENT = ""
        for l in fl[2:]:
            s = l
            if l[0] == '<' and l[-2] == '>':
                s = l[1:-2]
                if len(s) > 70:
                    s = s[0:70] + "..."
                s = f'<a href="{l[1:-2]}">&lt;' + s + '&gt;</a>'
            CONTENT += s
        res = eval(template.template[type])
        with open(out_html, 'w') as des:
            des.write(res)
        return (ARTICLE_NAME, CREATION_TIME, out_html)
    except Exception as e:
        log(e, 1)
        log(f"Something went wrong while converting {in_txt} to {out_html}")
        log(f"Skipping")

if not os.path.isdir("source"):
    log("Missing source", 1)
    unexpected_exit(1)

articles = []

try:
    for t in os.listdir("source"):
        t_path = os.path.join("source", t)
        if os.path.isdir(t_path):
            os.mkdir(os.path.join("site", t))
            for f in os.listdir(t_path):
                f_path = os.path.join(t_path, f)
                (an, ct, path) = convert_text(t, f_path, \
                    os.path.join("site", t, os.path.splitext(os.path.basename(f))[0]) + ".html"\
                    )
                articles.append((an, ct, path))
                # Resulting in site/[TEMPLATE]/[FILENAME_NOEXT].html
except Exception as e:
    log(e, 1)
    log(f"Errors occurred when converting text files", 1)
    unexpected_exit(1)

# Generate front page

# First sort everything in time order, new to old
articles.sort(key = lambda x: x[1], reverse = True)

POST_ITEM = ""

# Generate front page
log("Generate front page")
try:
    for item in articles:
        CREATION_TIME = item[1]
        ARTICLE_NAME = item[0]
        PATH = item[2].replace("site/", "")
        POST_ITEM += eval(template.template["post_item"])
    with open("site/index.html", 'w') as f:
        f.write(eval(template.template["front_page"]))
except:
    log("Fail to generate front page", 1)
    unexpected_exit(1)

log("Finish generating the site", 4)
